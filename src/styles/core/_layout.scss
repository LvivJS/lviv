@import '_flexboxgrid.scss';

// RWD
$breakpoints: ('xs': (max-width: 480px), // small phones
  'smr': (max-width: 600px), // tablet portrait (nexus 7)
  'sm': (max-width: 768px), // tablet portrait (ipad air)
  'md': (min-width: 769px) and (max-width: 991px), // tablet landscape
  'lg': (min-width: 992px), // small desktops
  'xl': (min-width: 1200px), // larger desktops
  'lg-d': (max-width: 991.98px),
  'xl-d': (max-width: 1199.98px),
);

@mixin respond-to($name) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn 'no value could be retrieved of `#{$breakpoint}` from `$breakpoints`.';
  }
}

@mixin rwd($min: 0, $max: 9999) {
  @media (min-width: $min+'px') and (max-width: $max+'px') {
    @content;
  }
}

// UTILITY spacing classes
$spaceamounts: (auto, 0, 8, 16, 24, 32, 48, 76, 80, 124); // Adjust this to include the pixel amounts you need.
$sides: (all, top, bottom, left, right);

@each $space in $spaceamounts {
  @each $side in $sides {
    @if $side=='all' {
      .m-#{$space} {
        margin: #{$space}#{if($space=='auto', '', 'px')} !important;
      }

      .p-#{$space} {
        padding: #{$space}#{if($space=='auto', '', 'px')} !important;
      }
    }

    @else {
      .m#{str-slice($side, 0, 1)}-#{$space} {
        margin-#{$side}: #{$space}#{if($space=='auto', '', 'px')} !important;
      }

      .p#{str-slice($side, 0, 1)}-#{$space} {
        padding-#{$side}: #{$space}#{if($space=='auto', '', 'px')} !important;
      }
    }
  }
}

// CONTAINER
.container {
  @include respond-to('xs') {
    padding-right: 40px;
    padding-left: 40px;
  }
}

// FLEX aligns
// TODO: remove instead of bootstrap classes
@mixin valigned {
  display: flex;
  align-items: center;
}

.valigned {
  @include valigned;
}

@mixin haligned {
  display: flex;
  justify-content: center;
}

@mixin centered {
  @include valigned;
  justify-content: center;
}

@mixin space-between {
  @include valigned;
  justify-content: space-between;
}

.space-between {
  @include space-between;
}

.grow {
  flex-grow: 1;
}

.shrink {
  flex-shrink: 1;
}

.no-shrink {
  flex-shrink: 0;
}

// TEXT aligns
.ta-right {
  text-align: right;
}

.hide {
  display: none;
}

.lg-hide {
  @include respond-to('lg') {
    display: none;
  }
}

.lg-show {
  @include respond-to('lg') {
    display: initial;
  }
}

.smr-hide {
  @include respond-to('smr') {
    display: none;
  }
}

// OVERFLOWS
// NO-SCROLL
.hide-scrollbar {
  scrollbar-width: none;
  -ms-overflow-style: none;

  &::-webkit-scrollbar {
    display: none;
  }
}

.crop-wrapper {
  position: relative;
  overflow: hidden;
}

.crop-content {
  @extend .hide-scrollbar;
  overflow-x: scroll;
  height: 100%;

  -webkit-overflow-scrolling: touch;
}

// BACKDROP, IMAGE background
@mixin stretch-overlay {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

@mixin backdrop($bg: rgba($dark-blue, 0.9)) {
  @include stretch-overlay;
  z-index: 1;
  height: 100vh;
  background: $bg;
}

@mixin back-image($url, $opacity: 1) {
  @include stretch-overlay;
  position: absolute;
  z-index: -1;
  opacity: $opacity;
  background-image: url($url);
  background-repeat: no-repeat;
  background-position: 50% 50%;
  background-size: cover;

  object-fit: cover;
}
